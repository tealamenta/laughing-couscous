name: CI - Tests & Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Tests & Code Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
    - name:  Checkout code
      uses: actions/checkout@v4
    
    - name:  Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name:  Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name:  Cache dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ matrix.python-version }}-
    
    - name:  Install dependencies
      run: poetry install --no-interaction
    
    - name:  Run tests with pytest
      run: |
        poetry run pytest tests/ -v --tb=short --cov=src/recipe_recommender --cov-report=xml --cov-report=term
    
    - name:  Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name:  Lint with Ruff
      run: |
        poetry run ruff check src/ tests/ --output-format=github
    
    - name:  Check formatting with Black
      run: |
        poetry run black --check src/ tests/
    
    - name:  Check complexity with Radon
      run: |
        poetry run radon cc src/recipe_recommender/ -a -nb
        echo "---"
        poetry run radon cc src/recipe_recommender/ -a --total-average
    
    - name:  Complexity grade check
      run: |
        COMPLEXITY=$(poetry run radon cc src/recipe_recommender/ -a --total-average | grep "Average complexity" | awk '{print $NF}' | tr -d '()')
        echo "Current complexity grade: $COMPLEXITY"
        if [ "$COMPLEXITY" != "A" ]; then
          echo " Warning: Complexity grade is not A"
          # Don't fail, just warn
        else
          echo " Complexity grade A maintained!"
        fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name:  Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name:  Install Poetry
      uses: snok/install-poetry@v1
    
    - name:  Security scan with Safety
      run: |
        poetry add --group dev safety
        poetry run safety check --json || true
      continue-on-error: true

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name:  Checkout code
      uses: actions/checkout@v4
    
    - name:  Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: ðŸ”¨ Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: recipe-recommender:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name:  Test Docker image
      run: |
        docker run -d --name test-app -p 8501:8501 recipe-recommender:test
        sleep 30
        curl -f http://localhost:8501/_stcore/health || exit 1
        docker stop test-app
