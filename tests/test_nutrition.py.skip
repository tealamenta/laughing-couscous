"""Tests pour nutrition utilities."""

from unittest.mock import MagicMock

from recipe_recommender.models.recipe import Recipe
from recipe_recommender.utils.nutrition import (
    calculate_daily_values,
    filter_by_nutrition,
    format_nutrition,
    get_nutrition_label,
    get_nutrition_summary,
    plot_nutrition_pie,
)


def test_calculate_daily_values():
    """Test calcul valeurs quotidiennes."""
    nutrition = [500.0, 30.0, 15.0, 25.0, 20.0, 35.0, 40.0]

    result = calculate_daily_values(nutrition)

    assert result["calories"] == 500.0
    assert result["fat_pdv"] == 30.0
    assert result["protein_pdv"] == 20.0


def test_get_nutrition_label():
    """Test labels nutritionnels."""
    recipe_low = Recipe(
        recipe_id=1,
        name="Low",
        description="Test",
        minutes=30,
        tags=[],
        nutrition=[250.0, 8.0, 3.0, 10.0, 5.0, 12.0, 10.0],
        ingredients=[],
        steps=[],
        n_steps=0,
        n_ingredients=0,
    )

    assert get_nutrition_label(recipe_low) == "LOW_FAT_LOW_CARB"


def test_filter_by_nutrition():
    """Test filtrage nutritionnel."""
    recipes = [
        Recipe(
            recipe_id=1,
            name="Recipe 1",
            description="Test",
            minutes=30,
            tags=[],
            nutrition=[200.0, 10.0, 5.0, 15.0, 10.0, 20.0, 25.0],
            ingredients=[],
            steps=[],
            n_steps=0,
            n_ingredients=0,
        ),
        Recipe(
            recipe_id=2,
            name="Recipe 2",
            description="Test",
            minutes=30,
            tags=[],
            nutrition=[600.0, 35.0, 20.0, 30.0, 25.0, 15.0, 40.0],
            ingredients=[],
            steps=[],
            n_steps=0,
            n_ingredients=0,
        ),
    ]

    result = filter_by_nutrition(recipes, max_calories=400.0)
    assert len(result) == 1
    assert result[0].recipe_id == 1


def test_format_nutrition():
    """Test formatage nutrition."""
    nutrition = [500.0, 30.0, 15.0, 25.0, 20.0, 35.0, 40.0]

    result = format_nutrition(nutrition)

    assert "500" in result
    assert "Calories" in result
    assert "VQ" in result


def test_plot_nutrition_pie():
    """Test graphique nutrition."""
    nutrition = [500.0, 30.0, 15.0, 25.0, 20.0, 35.0, 40.0]

    fig = plot_nutrition_pie(nutrition)

    assert fig is not None


def test_get_nutrition_summary():
    """Test résumé nutritionnel."""
    recipe = Recipe(
        recipe_id=1,
        name="Test",
        description="Test",
        minutes=30,
        tags=[],
        nutrition=[500.0, 30.0, 15.0, 25.0, 20.0, 35.0, 40.0],
        ingredients=[],
        steps=[],
        n_steps=0,
        n_ingredients=0,
    )

    result = get_nutrition_summary(recipe)

    assert "500" in result
    assert "Calories" in result
